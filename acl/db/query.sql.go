// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
)

const createACLPolicies = `-- name: CreateACLPolicies :exec
INSERT INTO acl_policies("role", "resource", "action") VALUES ($1, $2, $3) ON CONFLICT DO NOTHING
`

type CreateACLPoliciesParams struct {
	Role     string
	Resource string
	Action   string
}

func (q *Queries) CreateACLPolicies(ctx context.Context, arg CreateACLPoliciesParams) error {
	_, err := q.db.ExecContext(ctx, createACLPolicies, arg.Role, arg.Resource, arg.Action)
	return err
}

const createAction = `-- name: CreateAction :exec
INSERT INTO actions (id) VALUES ($1) ON CONFLICT DO NOTHING
`

func (q *Queries) CreateAction(ctx context.Context, action string) error {
	_, err := q.db.ExecContext(ctx, createAction, action)
	return err
}

const createResource = `-- name: CreateResource :exec
INSERT INTO resources (id) VALUES ($1) ON CONFLICT DO NOTHING
`

func (q *Queries) CreateResource(ctx context.Context, resource string) error {
	_, err := q.db.ExecContext(ctx, createResource, resource)
	return err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (id) VALUES ($1) ON CONFLICT DO NOTHING
`

func (q *Queries) CreateRole(ctx context.Context, role string) error {
	_, err := q.db.ExecContext(ctx, createRole, role)
	return err
}

const findACLPolicies = `-- name: FindACLPolicies :many
SELECT role, resource, action FROM acl_policies
`

func (q *Queries) FindACLPolicies(ctx context.Context) ([]AclPolicy, error) {
	rows, err := q.db.QueryContext(ctx, findACLPolicies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AclPolicy
	for rows.Next() {
		var i AclPolicy
		if err := rows.Scan(&i.Role, &i.Resource, &i.Action); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findActions = `-- name: FindActions :many
SELECT id FROM resources
`

func (q *Queries) FindActions(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findActions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findResources = `-- name: FindResources :many
SELECT id FROM resources
`

func (q *Queries) FindResources(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRoles = `-- name: FindRoles :many
SELECT id FROM roles
`

func (q *Queries) FindRoles(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
